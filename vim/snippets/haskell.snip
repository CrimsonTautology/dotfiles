
snippet info
abbr    Module Information
prev_word   '^'
    -- |
    -- Module : ${1:Module.Namespace}
    -- Copyright : ${2:Author} ${3:2011-2012}
    -- License : ${4:BSD3}
    --
    -- Maintainer : ${5:email@something.com}
    -- Stability : ${6:experimental}
    -- Portability : ${7:unknown}
    --
    -- ${8:Description}
    --

snippet import0
abbr Import Everything
prev_word   '^'
    import ${1:Data.Text}
snippet import1
abbr Import As
prev_word   '^'
    import ${1:Data.Text} as ${2:D}
snippet import2
abbr Import Only
prev_word   '^'
    import ${1:Data.Text} (${2:head})
snippet import3
abbr Qualified Import
prev_word   '^'
    import qualified ${1:Data.Text} as ${2:T}

snippet inst
prev_word   '^'
    instance ${1:Monoid} ${2:Type} where
        ${3}
snippet type
prev_word   '^'
    type ${1:Type} = ${2:Type}
snippet data
prev_word   '^'
    data ${1:Type} = ${2:$1} ${3:Int}
snippet newtype
prev_word   '^'
    newtype ${1:Type} = ${2:$1} ${3:Int}
snippet class
prev_word   '^'
    class ${1:Class} a where
        ${2}


snippet case
    case ${1:something} of
        ${2} -> ${3}
snippet let
    let ${1} = ${2}
    in ${3}
snippet where
    where
        ${1:fn} = ${2:undefined}


snippet const
prev_word   '^'
    ${1:name} :: ${2:a}
    $1 = ${3:undefined}
snippet fn
alias   func
prev_word   '^'
abbr    f :: a -> b
    ${1:fn} :: ${2:a} -> ${3:a}
    $1 ${4} = ${5:undefined}
snippet fn2
alias   func2
prev_word   '^'
abbr    f :: a -> b -> c
    ${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}
    $1 ${5} = ${6:undefined}
snippet fn3
alias   func3
prev_word   '^'
abbr    f :: a -> b -> c -> d
    ${1:fn} :: ${2:a} -> ${3:a} -> ${4:a}
    $1 ${5} = ${6:undefined}

snippet map
abbr    map f [xs]
    ${1:map} ${2:fn} ${3:list}

snippet     do
abbr        Do Syntax
    do
    ${0}

snippet     record
abbr        Record Syntax
prev_word   '^'
    data ${1:Foo} = $1 { 
      ${2:fooX} :: ${3:Int}, 
      ${4:fooX}:: ${5:Int}${0}
    } deriving (${6:Show})
    
